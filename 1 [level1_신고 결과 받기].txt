class Solution {
    public int[] solution(String[] id_list, String[] report, int k) {
        
        // 1. 모든 유저에 대해서 신고자리스트를 생성함
        // Key: 유저, Value: 유저를 신고한 사람들
        // mail_map: {유저, 신고수}
        Map<String, List<String>> map = new HashMap<>();
        Map<String, Integer> mail_map = new HashMap<>();
        
        for(String user: id_list){
            List<String> list = new LinkedList<>();
            map.put(user, list);
            mail_map.put(user, 0);
        }
        
        // 2. 신고당한 건수를 처리
        // 신고자: attacker, 신고당한자: defender
        for(String temp: report){
            String[] arr = temp.split(" ");
            String attacker = arr[0];
            String defender = arr[1];
            List<String> list = map.get(defender);
            // 중복신고 막기
            if(list.contains(attacker)){
                continue;
            }
            list.add(attacker);
            map.put(defender, list);
        }
        
        // 3. K번 신고당한 사람을 찾고, 신고한 사람들에게 카운드증가
        for(String data: map.keySet()){
            List<String> list = map.get(data);
            if(list.size() >= k){
                for(String user: list){
                    int count = mail_map.get(user)+1;
                    mail_map.put(user, count);
                }
            }
        }
        
        int i = 0;
        int[] answer = new int[id_list.length];
        for(String data: id_list){
            answer[i] = mail_map.get(data);
            i++;
        };
        return answer;
    }
}